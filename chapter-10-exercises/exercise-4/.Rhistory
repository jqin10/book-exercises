library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights<- mutate(flights, delayed_in_air =   arr_delay - dep_delay)
View(flights)
flights$delayed_in_air = flights$arr_delay-flights$dep_delay
arr_delay - dep_delay
# Exercise 4: practicing with dplyr
library("dplyr")
flights<- arrange(flights, -delayed_in_air)
flights<- mutate(flights, delayed_in_air =   arr_delay - dep_delay) %>%
arrange(-delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(delayed_in_air)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights<- mutate(flights, delayed_in_air =   arr_delay - dep_delay)
View(flights)
flights<- arrange(flights, -delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist("delayed_in_air")
# Make a histogram of the amount of time gained using the `hist()` function
hist(5, "delayed_in_air")
# Make a histogram of the amount of time gained using the `hist()` function
hist(5, delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$delayed_in_air)
flights %>%
fliter(origin == "JFK" & dest == "SEA") %>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE), min_delayed = max(delayed_in_air, na.rm = TRUE), max(delayed_in_air, na.rm = TRUE))
flights %>%
filter(origin == "JFK" & dest == "SEA") %>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE), min_delayed = max(delayed_in_air, na.rm = TRUE), max(delayed_in_air, na.rm = TRUE))
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
iew(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <-  c(vehicles[ , "make"])
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
length(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
manufactuerers_1997 <- vehicles[vehicles$year == "1997", ]
print(manufactuerers_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
manufactuerers_1997$average <- (manufactuerers_1997$hwy + manufactuerers_1997$cty)/2
View(manufactuerers_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd<- vehicles[vehicles$drive == "2-Wheel Drive" , ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty>20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy== min(vehicles_2wd$hwy), "id"]
vehicles_2wd$id
vehicles_2wd$hwy
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
efficient_model <- function(year_choice, make_choice){
hello <- make_choice[make_choice$year == "year_choice"]
vehicles <- make_choice[make_choice$hwy == max(make_choice$hwy),]
final <- select( make_choice, hello, vehicles)
return(final)
}
# What was the most efficient Honda model of 1995?
efficient_mode("1995", "Honda")
efficient_model("1995", "Honda")
# What was the most efficient Honda model of 1995?
efficient_model("1995", flights)
efficient_model <- function(year_choice, make_choice){
vehicles <- make_choice[make_choice$hwy == max(make_choice$hwy), make_choice$year == "year_choice"]
final <- select( make_choice, vehicles)
return(final)
}
# What was the most efficient Honda model of 1995?
efficient_model("1995", flights)
# What was the most efficient Honda model of 1995?
efficient_model("1995", flights)
efficient_model <- function(year_choice, make_choice, data_df){
select(data_df, year_choice, make_choice)
return(data_df[data_df$hwy == max(data_df$hwy), data_df$year == "year_choice"])
}
# What was the most efficient Honda model of 1995?
efficient_model("1995", "Honda", vehicles)
efficient_model <- function(year_choice, make_choice, data_df){
select(data_df, year_choice, make_choice)
return(data_df$year == "year_choice", data_df[data_df$hwy == max(data_df$hwy)])
}
efficient_model("1995", "Honda", vehicles)
# What was the most efficient Honda model of 1995?
efficient_model(vehicles$year= "1995", "Honda", vehicles)
# What was the most efficient Honda model of 1995?
efficient_model(vehicles$year == "1995", "Honda", vehicles)
efficient_model <- function(year_choice, make_choice, data_df){
select(data_df, year_choice, make_choice)
return(data_df$year == "year_choice", data_df[data_df$make_choice == max(data_df$make_choice)])
}
# What was the most efficient Honda model of 1995?
efficient_model( "1995", "Honda", vehicles)
# What was the most efficient Honda model of 1995?
efficient_model( 1995, Honda, vehicles)
efficient_model <- function(year_choice, make_choice, data_df){
select(data_df, year_choice, make_choice)
return(data_df$year == "year_choice", data_df[data_df$make_choice == max(data_df$make_choice)])
}
# What was the most efficient Honda model of 1995?
efficient_model( vehicles$year== "1995", vehicles$model == "Honda", vehicles)
efficient_model( year_choice = "1996", make_choice = "Honda", vehicles)
efficient_model( year_choice == "1996", make_choice == "Honda", vehicles)
efficient_model <- function(year_choice, make_choice) {
year <- filter(year == year_choice,)
model <-select(year, make_choice)
return(model)
}
# What was the most efficient Honda model of 1995?
efficient_model( vehicles["1996", "Honda"])
# What was the most efficient Honda model of 1995?
efficient_model( vehicles[1996, vechicles$model == "Honda"])
year <- filter( year == year_choice,)
model <-select(year, make_choice)
return(model)
}
efficient_model <- function(year_choice, make_choice) {
year <- filter( year == year_choice,)
model <-select(year, make_choice)
return(model)
}
efficient_model( vehicles[1996, vechicles$model == "Honda"])
