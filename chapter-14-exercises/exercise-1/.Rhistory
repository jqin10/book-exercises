# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
library("httr")
install.packages("jsonlite")
#install.packages("jsonlite")
library("jsonlite")
library("httr")
#install.packages("jsonlite")
library("jsonlite")
base_uri <- "https://api.github.com"
print(base_uri)
username <- "/orgs/{org}/"
username <- "/orgs/{org}/"
org_resource <- paste0("/users/", username, "/repos")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
print(uri)
username <- "orgs/{org}"
org_resource <- paste0("/users/", username, "/repos")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
print(uri)
username <- "orgs/{org}"
org_resource <- paste0("/users/", username, "/repos{?type,page,per_page,sort}")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
print(uri)
response <- GET(uri)
body <- content(response , "text")
data<- fromJSON(body)
View(data)
is.data.frame(body_data)
is.data.frame(body)
str(body)
names(body)
org_resource <- paste0(base_uri, "/users/", username, "/repos{?type,page,per_page,sort}")
uri <- paste0(base_uri, org_resource)
response <- GET(uri)
search_endpoint <- paste0(base_uri, "/search/repositories?q={query}{&page,per_page,sort,order}")
search_endpoint <- paste0(base_uri, "/search/repositories?q={query}{&page,per_page,sort,order}")
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q ='food')
resource2 <- GET(search_endpoint, query = query_params)
body2 <- content(resource2 , "text")
# What are the full names of the top 5 repos in the search results?
print(body2)
org_resource <- paste0(base_uri, username, "/repos{?type,page,per_page,sort}")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
response <- GET(uri)
username <- "/orgs/"
org_resource <- paste0(base_uri, username, "/programming-for-data-science/repos")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
response <- GET(uri)
library("httr")
#install.packages("jsonlite")
library("jsonlite")
response <- GET(uri)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
username <- "/orgs"
org_resource <- paste0(base_uri, username, "/programming-for-data-science/repos")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
response <- GET(uri)
