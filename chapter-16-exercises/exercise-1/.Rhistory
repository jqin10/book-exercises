ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity)) +
position_dodge2(width = NULL, preserve = c("total", "single"),
padding = 0.1, reverse = FALSE)
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity)) +
position_dodge2(width = NULL, preserve = c("total", "single"),
padding = 0.1, reverse = FALSE)
diamonds_sample <- sample_n(diamonds, 1000)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library("dplyr")
diamonds_sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity)) +
position_dodge2(width = NULL, preserve = c("total", "single"),
padding = 0.1, reverse = FALSE)
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity)) +
geom_bar(position = "dodge2")
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity))
ggplot(data = diamonds_sample, aes(x = cut, y = price, fill =  clarity)) +
geom_bar(position = "dodge2")
ggplot(data = diamonds_sample, aes(x = cut fill =  clarity)) +
geom_bar(position = "dodge2")
ggplot(data = diamonds_sample, aes(x = cut, fill =  clarity)) +
geom_bar(position = "dodge2")
ggplot(data = diamonds_sample, aes(x = cut, y =  clarity))
geom_jitter(mapping = aes(x = cut, y =  clarity), data = diamonds_sample, stat = "identity",
position = "jitter", ..., width = NULL, height = NULL,
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
ggplot(diamonds_sample, aes(cut,clarity)) +
geom_boxplot(colour = "blue") +
geom_jitter()
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity))
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
bar <- ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity), width =1)
View(bar)
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
ggplot(diamonds_sample, aes(x = cut(), fill = factor(clarity))) +  geom_bar(width = 1) +  coord_polar(theta = "y")
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
ggplot(diamonds_sample, aes(x = cut, fill = factor(clarity))) +  geom_bar(width = 1) +  coord_polar(theta = "y")
ggplot(diamonds_sample) +  geom_col(mapping = aes(x = carat, y = rice)) +  coord_flip()
ggplot(diamonds_sample) +  geom_col(mapping = aes(x = carat, y = price)) +  coord_flip()
