# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(dplyr)
install.packages("ggplot2")
library("ggplot2")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
diamonds_saple <- sample_n(diamonds, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
colnames(diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color= clairty ))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity ))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity ))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = "blue" ))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price,
color = "blue",
alpha = 0.3))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price,
colour = "blue"))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price,
colour = "#56B4E9"))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price,
color = "#56B4E9"))
ggplot(data = week8) +  geom_point(mapping = aes(x = ACADHERE, color = ACADHERE, y = Frequency))
adherence_df <- read.csv('./selfadh.csv', stringsAsFactors = FALSE)
setwd("~/Desktop/069_adh_data")
adherence_df <- read.csv('./selfadh.csv', stringsAsFactors = FALSE)
week8<- filter(adherence_df, ACVISIT == "Week 8 (Visit 5.0)") %>%
select(uid, ACVISIT, ACADHERE) %>%
group_by(ACADHERE) %>%
summarise(
Frequency= n()
)
ggplot(data = week8) +  geom_point(mapping = aes(x = ACADHERE, color = ACADHERE, y = Frequency))
setwd("~/Desktop/book-exercises/chapter-16-exercises/exercise-1")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size=price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, color = price))
ggplot(data = week8) +  geom_bar(mapping = aes(x = ACADHERE, y = Frequency))
ggplot(data = week8) +  geom_point(mapping = aes(x = ACADHERE, y = Frequency), color = ACADHERE)
ggplot(data = week8) +  geom_point(mapping = aes(x = ACADHERE, y = Frequency), color = "ACADHERE")
ggplot(data = week8) +  geom_point(mapping = aes(x = ACADHERE,color = ACADHERE, y = Frequency)
ggplot(data = week8) +  geom_point(mapping = aes(x = ACADHERE,color = ACADHERE, y = Frequency))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = cut, color = cut))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = carat, y = price, fill =  clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity ))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, color = cut))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut(), y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity))
View(adherence_df)
ggplot(data = week8) +  geom_point(mapping = aes(x = ACADHERE,color = ACADHERE, y = Frequency))
ggplot(data = week8) +  geom_point(mapping = aes(x = "Adherence Strength",color = ACADHERE, y = Frequency))
ggplot(data = week8) +  geom_bar(mapping = aes(x = ACADHERE, y = Frequency))
week8<- filter(adherence_df, ACVISIT == "Week 8 (Visit 5.0)") %>%
select(uid, ACVISIT, ACADHERE) %>%
group_by(ACADHERE) %>%
summarise(
Frequency= n()
) %>%
arrange(-Frequency)
View(week8)
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, y = price, color = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cuts, y = price, color = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  clarity))
setwd("~/Desktop/book-exercises/chapter-16-exercises/exercise-2")
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill =  dose))
diamonds_sample <- sample_n(diamonds, 1000)
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data= diamonds_sample)+
geom_boxplot(mappling=aes(x=color, y= price))
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data= diamonds_sample)+
geom_boxplot(mapping=aes(x=color, y= price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data= diamonds_sample)+
geom_boxplot(mapping=aes(x=color, y= price))+
scale_y_log10()
ggplot(data= diamonds_sample)+
geom_violin(mapping=aes(x=color, y= price))+
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data= diamonds_sample)+
geom_bin2d(mapping=aes(x=color, y= price))+
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data= diamonds_sample)+
geom_bin2d(mapping=aes(x=color, y= price))
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data= diamonds_sample)+
geom_bin2d(mapping=aes(x=color, y= price))+
scale_x_log10()+
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data= diamonds_sample)+
geom_bin2d(mapping=aes(x=carat, y= price))+
scale_x_log10()+
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data= diamonds_sample)+
geom_point(mapping=aes(x=carat, y= price), color = clairity)
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data= diamonds_sample)+
geom_point(mapping=aes(x=carat, y= price), color = clarity)
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data= diamonds_sample)+
geom_point(mapping=aes(x=carat, y= price, color = clarity))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data= diamonds_sample)+
geom_point(mapping=aes(x=carat, y= price, color = clarity))+
scale_color_brewer(palette= "Dark2")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data= diamonds_sample)+
geom_point(mapping=aes(x=carat, y= price, color = clarity))+
scale_color_brewer(palette= "Purples")
ggplot(data= diamonds_sample)+
geom_point(mapping= aes(x= carat, y= price, color= clarity))+
facet_wrap(~color)
ggplot(data= diamonds_sample)+
geom_point(mapping= aes(x= carat, y= price, color= clarity))+
facet_wrap(~cut)
ggplot(data= diamonds_sample)+
geom_point(mapping= aes(x= carat, y= price, color= clarity))+
facet_wrap(~clarity)
